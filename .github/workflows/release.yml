name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Generate changelog
      id: changelog
      run: |
        # 生成变更日志
        git log --oneline --no-merges $(git describe --tags --abbrev=0 HEAD^)..HEAD > CHANGELOG.txt
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        cat CHANGELOG.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: QuantAnalyzer Pro ${{ github.ref_name }}
        body: |
          ## Changes in ${{ github.ref_name }}
          
          ${{ env.CHANGELOG }}
          
          ## Docker Images
          
          - Backend: `quantanalyzer/backend:${{ github.ref_name }}`
          - Frontend: `quantanalyzer/frontend:${{ github.ref_name }}`
        draft: false
        prerelease: false

  build-rust-binaries:
    name: Build Rust Binaries
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Build binary
      run: |
        cd rust-engine
        cargo build --release --target ${{ matrix.target }}
    
    - name: Package binary
      shell: bash
      run: |
        cd rust-engine/target/${{ matrix.target }}/release
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          7z a ../../../quant-engine-${{ matrix.name }}.zip quant-engine.exe
        else
          tar czf ../../../quant-engine-${{ matrix.name }}.tar.gz quant-engine
        fi
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: rust-engine/quant-engine-${{ matrix.name }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}
        asset_name: quant-engine-${{ matrix.name }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}
        asset_content_type: application/octet-stream

  docker-release:
    name: Docker Release Build
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend release image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: |
          quantanalyzer/backend:${{ github.ref_name }}
          quantanalyzer/backend:stable
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push frontend release image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: |
          quantanalyzer/frontend:${{ github.ref_name }}
          quantanalyzer/frontend:stable
        platforms: linux/amd64,linux/arm64